// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirejackettest

import (
	"github.com/bang9211/wire-jacket/internal/config"
	"github.com/bang9211/wire-jacket/wirejackettest/defaultexplorerserver"
	"github.com/bang9211/wire-jacket/wirejackettest/defaultrestapiserver"
	"github.com/bang9211/wire-jacket/wirejackettest/ossiconesblockchain"
)

// Injectors from wire.go:

// InjectViperConfig injects dependencies and inits of Config.
func InjectViperConfig() (config.Config, error) {
	configConfig := config.NewViperConfig()
	return configConfig, nil
}

// InjectOssiconesBlockchain injects dependencies and inits of Blockchain.
func InjectOssiconesBlockchain(config2 config.Config) (ossiconesblockchain.Blockchain, error) {
	blockchain := ossiconesblockchain.GetOrCreate(config2)
	return blockchain, nil
}

// InjectDefaultExplorerServer injects dependencies and inits of ExplorerServer.
func InjectDefaultExplorerServer(config2 config.Config, blockchain ossiconesblockchain.Blockchain) (defaultexplorerserver.ExplorerServer, error) {
	explorerServer := defaultexplorerserver.GetOrCreate(config2, blockchain)
	return explorerServer, nil
}

// InjectDefaultRESTAPIServer injects dependencies and inits of APiServer.
func InjectDefaultRESTAPIServer(config2 config.Config, blockchain ossiconesblockchain.Blockchain) (defaultrestapiserver.RESTAPIServer, error) {
	restapiServer := defaultrestapiserver.GetOrCreateDefault(config2, blockchain)
	return restapiServer, nil
}

// wire.go:

//
// Dependency Injection List
//
// injectors stores module_name(key) with injector_func(value) using map.
// For wiring, name of implement using in config with injector function.
//
// Examples :
//
//	var injectors = map[string]interface{}{
// 		"viperconfig": 			InjectViperConfig,
// 		"ossiconesblockchain":	InjectOssiconesBlockchain,
// 	}
//
// 	var eagerInjectors = map[string]interface{}{
// 		"defaultexplorerserver": InjectDefaultExplorerServer,
// 		"defaultrestapiserver":  InjectDefaultRESTAPIServer,
// 	}
//
var injectors = map[string]interface{}{
	"viperconfig":         InjectViperConfig,
	"ossiconesblockchain": InjectOssiconesBlockchain,
}

var eagerInjectors = map[string]interface{}{
	"defaultexplorerserver": InjectDefaultExplorerServer,
	"defaultrestapiserver":  InjectDefaultRESTAPIServer,
}
